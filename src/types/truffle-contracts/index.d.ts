/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from 'bignumber.js';

export interface MigrationsContract extends Truffle.Contract<MigrationsInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface SMT256Contract extends Truffle.Contract<SMT256Instance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<SMT256Instance>;
}

export interface SMTExampleContract extends Truffle.Contract<SMTExampleInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<SMTExampleInstance>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  upgrade: {
    (new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface SMT256Instance extends Truffle.ContractInstance {
  EXIST(txDetails?: Truffle.TransactionDetails): Promise<string>;

  NON_EXIST(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface SMTExampleInstance extends Truffle.ContractInstance {
  inclusionProof(
    root: string | BigNumber,
    leaf: string | BigNumber,
    siblings: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  nonInclusionProof(
    root: string | BigNumber,
    leaf: string | BigNumber,
    siblings: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  merkleProof(
    root: string | BigNumber,
    leaf: string | BigNumber,
    value: string | BigNumber,
    siblings: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  rollUp(root: string | BigNumber, leaves: (string | BigNumber)[], siblings: (string | BigNumber)[][], txDetails?: Truffle.TransactionDetails): Promise<string>;

  rollUpProof(
    root: string | BigNumber,
    nextRoot: string | BigNumber,
    leaves: (string | BigNumber)[],
    siblings: (string | BigNumber)[][],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}
