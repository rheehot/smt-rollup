/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import Contract, { contractOptions } from 'web3/eth/contract';
import { EventLog, Callback, EventEmitter } from 'web3/types';
import { TransactionObject, BlockType } from 'web3/eth/types';
import { ContractEvent } from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class SMTExample extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: contractOptions);
  clone(): SMTExample;
  methods: {
    inclusionProof(root: string | number[], leaf: string | number[], siblings: (string | number[])[]): TransactionObject<boolean>;

    nonInclusionProof(root: string | number[], leaf: string | number[], siblings: (string | number[])[]): TransactionObject<boolean>;

    merkleProof(root: string | number[], leaf: string | number[], value: string | number[], siblings: (string | number[])[]): TransactionObject<boolean>;

    rollUp(root: string | number[], leaves: (string | number[])[], siblings: (string | number[])[][]): TransactionObject<string>;

    rollUpProof(
      root: string | number[],
      nextRoot: string | number[],
      leaves: (string | number[])[],
      siblings: (string | number[])[][]
    ): TransactionObject<boolean>;
  };
  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
  };
}
